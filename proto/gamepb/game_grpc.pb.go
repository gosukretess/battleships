// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: proto/game.proto

package gamepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameService_CreateGame_FullMethodName  = "/game.GameService/CreateGame"
	GameService_GetAllGames_FullMethodName = "/game.GameService/GetAllGames"
	GameService_PlayerMove_FullMethodName  = "/game.GameService/PlayerMove"
	GameService_GetShips_FullMethodName    = "/game.GameService/GetShips"
	GameService_GetMoves_FullMethodName    = "/game.GameService/GetMoves"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	GetAllGames(ctx context.Context, in *GetAllGamesRequest, opts ...grpc.CallOption) (*GetAllGamesResponse, error)
	PlayerMove(ctx context.Context, opts ...grpc.CallOption) (GameService_PlayerMoveClient, error)
	GetShips(ctx context.Context, in *GetShipsRequest, opts ...grpc.CallOption) (*GetShipsResponse, error)
	GetMoves(ctx context.Context, in *GetMovesRequest, opts ...grpc.CallOption) (*GetMovesResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, GameService_CreateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetAllGames(ctx context.Context, in *GetAllGamesRequest, opts ...grpc.CallOption) (*GetAllGamesResponse, error) {
	out := new(GetAllGamesResponse)
	err := c.cc.Invoke(ctx, GameService_GetAllGames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PlayerMove(ctx context.Context, opts ...grpc.CallOption) (GameService_PlayerMoveClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_PlayerMove_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServicePlayerMoveClient{stream}
	return x, nil
}

type GameService_PlayerMoveClient interface {
	Send(*GameEvent) error
	Recv() (*GameEvent, error)
	grpc.ClientStream
}

type gameServicePlayerMoveClient struct {
	grpc.ClientStream
}

func (x *gameServicePlayerMoveClient) Send(m *GameEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServicePlayerMoveClient) Recv() (*GameEvent, error) {
	m := new(GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) GetShips(ctx context.Context, in *GetShipsRequest, opts ...grpc.CallOption) (*GetShipsResponse, error) {
	out := new(GetShipsResponse)
	err := c.cc.Invoke(ctx, GameService_GetShips_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetMoves(ctx context.Context, in *GetMovesRequest, opts ...grpc.CallOption) (*GetMovesResponse, error) {
	out := new(GetMovesResponse)
	err := c.cc.Invoke(ctx, GameService_GetMoves_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	GetAllGames(context.Context, *GetAllGamesRequest) (*GetAllGamesResponse, error)
	PlayerMove(GameService_PlayerMoveServer) error
	GetShips(context.Context, *GetShipsRequest) (*GetShipsResponse, error)
	GetMoves(context.Context, *GetMovesRequest) (*GetMovesResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameServiceServer) GetAllGames(context.Context, *GetAllGamesRequest) (*GetAllGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGames not implemented")
}
func (UnimplementedGameServiceServer) PlayerMove(GameService_PlayerMoveServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayerMove not implemented")
}
func (UnimplementedGameServiceServer) GetShips(context.Context, *GetShipsRequest) (*GetShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShips not implemented")
}
func (UnimplementedGameServiceServer) GetMoves(context.Context, *GetMovesRequest) (*GetMovesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoves not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetAllGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetAllGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetAllGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetAllGames(ctx, req.(*GetAllGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PlayerMove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).PlayerMove(&gameServicePlayerMoveServer{stream})
}

type GameService_PlayerMoveServer interface {
	Send(*GameEvent) error
	Recv() (*GameEvent, error)
	grpc.ServerStream
}

type gameServicePlayerMoveServer struct {
	grpc.ServerStream
}

func (x *gameServicePlayerMoveServer) Send(m *GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServicePlayerMoveServer) Recv() (*GameEvent, error) {
	m := new(GameEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameService_GetShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetShips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetShips(ctx, req.(*GetShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetMoves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetMoves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetMoves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetMoves(ctx, req.(*GetMovesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GameService_CreateGame_Handler,
		},
		{
			MethodName: "GetAllGames",
			Handler:    _GameService_GetAllGames_Handler,
		},
		{
			MethodName: "GetShips",
			Handler:    _GameService_GetShips_Handler,
		},
		{
			MethodName: "GetMoves",
			Handler:    _GameService_GetMoves_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayerMove",
			Handler:       _GameService_PlayerMove_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/game.proto",
}
